<?php

/**
 * This is the model base class for the table "user".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "User".
 *
 * Columns in table "user" available as properties of the model,
 * followed by relations of table "user" available as properties of the model.
 *
 * @property integer $id
 * @property string $username
 * @property string $password
 * @property integer $status
 * @property string $salt
 *
 * @property IguAgents[] $iguAgents
 * @property IguRegistration[] $iguRegistrations
 */
abstract class BaseUser extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'user';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'User|Users', $n);
	}

	public static function representingColumn() {
		return 'username';
	}

	public function rules() {
		return array(
			array('username, password, status, salt', 'required'),
			array('status', 'numerical', 'integerOnly'=>true),
			array('username, password, salt', 'length', 'max'=>32),
			array('id, username, password, status, salt', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
			'iguAgents' => array(self::HAS_MANY, 'IguAgents', 'iduser'),
			'iguRegistrations' => array(self::HAS_MANY, 'IguRegistration', 'iduser'),
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
			'username' => Yii::t('app', 'Izina uzakoresha'),
			'password' => Yii::t('app', 'Akajambo kibanga'),
			'status' => Yii::t('app', 'Status'),
			'salt' => Yii::t('app', 'Salt'),
			'iguAgents' => null,
			'iguRegistrations' => null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id);
		$criteria->compare('username', $this->username, true);
		$criteria->compare('password', $this->password, true);
		$criteria->compare('status', $this->status);
		$criteria->compare('salt', $this->salt, true);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
			// hash password
public function hashPassword($password, $salt)
{
    return md5($salt.$password);
}
        
// password validation
public function validatePassword($password)
{
    return $this->hashPassword($password,$this->salt)===$this->password;
}
        
//generate salt
public function generateSalt()
{
    return uniqid('',true);
}
        
public function beforeValidate()
{
    $this->salt = $this->generateSalt();
    return parent::beforeValidate();
}
        
public function beforeSave()
{
    $this->password = $this->hashPassword($this->password, $this->salt);
    return parent::beforeSave();
}
}