<?php

/**
 * This is the model base class for the table "igu_historique_price".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "IguHistoriquePrice".
 *
 * Columns in table "igu_historique_price" available as properties of the model,
 * followed by relations of table "igu_historique_price" available as properties of the model.
 *
 * @property integer $id
 * @property integer $idproduct
 * @property integer $idclient
 * @property string $changedate
 * @property integer $oldprice
 * @property integer $newprice
 *
 * @property IguRegistration $idclient0
 * @property IguProducts $idproduct0
 */
abstract class BaseIguHistoriquePrice extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'igu_historique_price';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'IguHistoriquePrice|IguHistoriquePrices', $n);
	}

	public static function representingColumn() {
		return 'changedate';
	}

	public function rules() {
		return array(
			array('idproduct, idclient, changedate, oldprice, newprice', 'required'),
			array('idproduct, idclient, oldprice, newprice', 'numerical', 'integerOnly'=>true),
			array('id, idproduct, idclient, changedate, oldprice, newprice', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
			'idclient0' => array(self::BELONGS_TO, 'IguRegistration', 'idclient'),
			'idproduct0' => array(self::BELONGS_TO, 'IguProducts', 'idproduct'),
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
			'idproduct' => null,
			'idclient' => null,
			'changedate' => Yii::t('app', 'Changedate'),
			'oldprice' => Yii::t('app', 'Oldprice'),
			'newprice' => Yii::t('app', 'Newprice'),
			'idclient0' => null,
			'idproduct0' => null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id);
		$criteria->compare('idproduct', $this->idproduct);
		$criteria->compare('idclient', $this->idclient);
		$criteria->compare('changedate', $this->changedate, true);
		$criteria->compare('oldprice', $this->oldprice);
		$criteria->compare('newprice', $this->newprice);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}